16 bit
Registers: ax,bx,cx,dx, without x is low byte
	mov	ax,value16	0x0001 ~	3clk
	mov	bx,value16	0x0002 ~	3clk
	mov	cx,value16	0x0003 ~	3clk
	mov	dx,value16	0x0004 ~	3clk

	mov	ax,bx		0x0005 ~	2clk
	mov	ax,cx		0x0006 ~	2clk
	mov	ax,dx		0x0007 ~	2clk
	
	mov	bx,ax		0x0008 ~	2clk
	mov	bx,cx		0x0009 ~	2clk
	mov	bx,dx		0x000a ~	2clk

	mov	cx,ax		0x000b ~	2clk
	mov	cx,bx		0x000c ~	2clk
	mov	cx,dx		0x000d ~	2clk
	
	mov	dx,ax		0x000e ~	2clk
	mov	dx,bx		0x000f ~	2clk
	mov	dx,cx		0x0010 ~	2clk
	
Memory Access:
	mov	ax,[ax]		0x0011 ~	3clk
	mov	ax,[bx]		0x0012 ~	3clk
	mov	ax,[cx]		0x0013 ~	3clk
	mov	ax,[dx]		0x0014 ~	3clk
	
	mov	bx,[ax]		0x0015 ~	3clk
	mov	bx,[bx]		0x0016 ~	3clk
	mov	bx,[cx]		0x0017 ~	3clk
	mov	bx,[dx]		0x0018 ~	3clk

	mov	cx,[ax]		0x0019
	mov	cx,[bx]		0x001a
	mov	cx,[cx]		0x001b
	mov	cx,[dx]		0x001c

	mov	dx,[ax]		0x001d
	mov	dx,[bx]		0x001e
	mov	dx,[cx]		0x001f
	mov	dx,[dx]		0x0020

	mov	[ax],ax		0x0021
	mov	[ax],bx		0x0022
	mov	[ax],cx		0x0023
	mov	[ax],dx		0x0024

	mov	[bx],ax		0x0025
	mov	[bx],bx		0x0026
	mov	[bx],cx		0x0027
	mov	[bx],dx		0x0028

	mov	[cx],ax		0x0029
	mov	[cx],bx		0x002a
	mov	[cx],cx		0x002b
	mov	[cx],dx		0x002c

	mov	[dx],ax		0x002d
	mov	[dx],bx		0x002e
	mov	[dx],cx		0x002f
	mov	[dx],dx		0x0030
	
Arithmatic: dest=dest<Math Operation>reg
	add	ax,ax		0x0031
	add	ax,bx		0x0032
	add	ax,cx		0x0033
	add	ax,dx		0x0034

	add	bx,ax		0x0035
	add	bx,bx		0x0036
	add	bx,cx		0x0037
	add	bx,dx		0x0038

	add	cx,ax		0x0039
	add	cx,bx		0x003a
	add	cx,cx		0x003b
	add	cx,dx		0x003c
	
	add	dx,ax		0x003d
	add	dx,bx		0x003e
	add	dx,cx		0x003f
	add	dx,dx		0x0040

	sub	ax,bx		0x0041
	sub	ax,cx		0x0042
	sub	ax,dx		0x0043

	sub	bx,ax		0x0044
	sub	bx,cx		0x0045
	sub	bx,dx		0x0046

	sub	cx,ax		0x0047
	sub	cx,bx		0x0048
	sub	cx,dx		0x0049

	sub	dx,ax		0x004a
	sub	dx,bx		0x004b
	sub	dx,cx		0x004c

	Add in add reg,value16
	Add in sub reg,vlaue16
	Maybe multiplication and division instructions? 
	Possible float?

Comparisons:
	cmp	ax,bx		0x004d
	cmp	ax,cx		0x004e
	cmp	ax,dx		0x004f

	cmp	bx,ax		0x0050
	cmp	bx,cx		0x0051
	cmp	bx,dx		0x0052

	cmp	cx,ax		0x0053
	cmp	cx,bx		0x0054
	cmp	cx,dx		0x0055

	cmp	dx,ax		0x0056
	cmp	dx,bx		0x0057
	cmp	dx,cx		0x0058

	cmp	ax,value16	0x0059
	cmp	bx,value16	0x005a
	cmp	cx,value16	0x005b
	cmp	dx,value16	0x005c
	
	Add cmp reg,[reg]
	Add cmp reg,[value16]
	
Jumps:
	jmp	address16	0x005d
	jmp	[ax]		0x005e
	
	je	address16	0x005f
	jl	address16	0x0060
	jg	address16	0x0061

Boolean:
	and	ax,ax		0x0062
	and	ax,bx		0x0063
	and	ax,cx		0x0064
	and	ax,dx		0x0065

	or	ax,bx		0x0066
	or	ax,cx		0x0067
	or	ax,dx		0x0068

	not	ax			0x0069
	not	bx			0x006a
	not	cx			0x006b
	not	dx			0x006c

	xor	ax,bx		0x006d
	xor	ax,cx		0x006e
	xor	ax,dx		0x006f
	
Shifting Instructions:
	shl	ax,value16	0x0070
	shl	ax,bx		0x0071
	shl	ax,cx		0x0072
	shl	ax,dx		0x0073

	shl	bx,value16	0x0074
	shl	bx,ax		0x0075
	shl	bx,cx		0x0076
	shl	bx,dx		0x0077
	
	shl	cx,value16	0x0078
	shl	cx,ax		0x0079
	shl	cx,bx		0x007a
	shl	cx,dx		0x007b

	shl	dx,value16	0x007c
	shl	dx,ax		0x007d
	shl	dx,bx		0x007e
	shl	dx,cx		0x007f

	shr	ax,value16	0x0080
	shr	ax,bx		0x0081
	shr	ax,cx		0x0082
	shr	ax,dx		0x0083

	shr	bx,value16	0x0084
	shr	bx,ax		0x0085
	shr	bx,cx		0x0086
	shr	bx,dx		0x0087

	shr	cx,value16	0x0088
	shr	cx,ax		0x0089
	shr	cx,bx		0x008a
	shr	cx,dx		0x008b

	shr	dx,value16	0x008c
	shr	dx,ax		0x008d
	shr	dx,bx		0x008e
	shr	dx,cx		0x008f

Misc Instructions:

	sets register to zero
	z	ax			0x0090
	z	bx			0x0091
	z	cx			0x0092
	z	dx			0x0093

	increments
	inc	ax			0x0094
	inc	bx			0x0095
	inc	cx			0x0096
	inc	dx			0x0097

	decrements
	dec	ax			0x0098
	dec	bx			0x0099
	dec	cx			0x009a
	dec	dx			0x009b

	mov memory with immediate value
	mov	ax,[value16]	0x009c
	mov	bx,[value16]	0x009e
	mov	cx,[value16]	0x009f
	mov	dx,[value16]	0x00a0

	mov	[value16],ax	0x00a1
	mov	[value16],bx	0x00a2
	mov	[value16],cx	0x00a3
	mov	[value16],dx	0x00a4

Graphics instructions:




	
	
	
	
