16 bit
Registers: ax,bx,cx,dx, without x is low byte
	
	56 mov instructions
	
	mov	ax,value16		0xc000
	mov	ax,bx			0xc001
	mov	ax,cx			0xc002
	mov	ax,dx			0xc003
	mov	ax,[value16]	0xc004
	mov	ax,[ax]			0xc005
	mov	ax,[bx]			0xc006
	mov	ax,[cx]			0xc007
	mov	ax,[dx]			0xc008
	mov	[ax],ax			0xc009
	mov	[ax],bx			0xc00a
	mov	[ax],cx			0xc00b
	mov	[ax],dx			0xc00c
	mov	[value16],ax	0xc00d
	
	mov	bx,value16		0xa000
	mov	bx,ax			0xa001
	mov	bx,cx			0xa002
	mov	bx,dx			0xa003
	mov	bx,[value16]	0xa004
	mov	bx,[ax]			0xa005
	mov	bx,[bx]			0xa006
	mov	bx,[cx]			0xa007
	mov	bx,[dx]			0xa008
	mov	[bx],ax			0xa009
	mov	[bx],bx			0xa00a
	mov	[bx],cx			0xa00b
	mov	[bx],dx			0xa00c
	mov	[value16],bx	0xa00d
	
	mov	cx,value16		0x9000
	mov	cx,ax			0x9001
	mov	cx,bx			0x9002
	mov	cx,dx			0x9003
	mov	cx,[value16]	0x9004
	mov	cx,[ax]			0x9005
	mov	cx,[bx]			0x9006
	mov	cx,[cx]			0x9007
	mov	cx,[dx]			0x9008
	mov	[cx],ax			0x9009
	mov	[cx],bx			0x900a
	mov	[cx],cx			0x900b
	mov	[cx],dx			0x900c
	mov	[value16],cx	0x900d
	
	mov	dx,value16		0x8800                
	mov	dx,ax			0x8801
	mov	dx,bx			0x8802
	mov	dx,cx			0x8803
	mov	dx,[value16]	0x8804	
	mov	dx,[ax]			0x8805
	mov	dx,[bx]			0x8806
	mov	dx,[cx]			0x8807
	mov	dx,[dx]			0x8808
	mov	[dx],ax		    0x8809
	mov	[dx],bx		    0x880a
	mov	[dx],cx		    0x880b
	mov	[dx],dx	        0x880c
	mov	[value16],dx	0x880d
	
Arithmatic: dest=dest<Math Operation>reg
	
	36 math instructions
	
	add	ax,ax		
	add	ax,bx		
	add	ax,cx		
	add	ax,dx		

	add	bx,ax		
	add	bx,bx		
	add	bx,cx		
	add	bx,dx		

	add	cx,ax		
	add	cx,bx		
	add	cx,cx		
	add	cx,dx		
	
	add	dx,ax		
	add	dx,bx		
	add	dx,cx		
	add	dx,dx	

	add	ax,value16		
	add	bx,value16		
	add	cx,value16		
	add	dx,value16
	
	sub	ax,bx		
	sub	ax,cx		
	sub	ax,dx		

	sub	bx,ax		
	sub	bx,cx		
	sub	bx,dx		

	sub	cx,ax		
	sub	cx,bx		
	sub	cx,dx		

	sub	dx,ax		
	sub	dx,bx		
	sub	dx,cx	
	
	sub	ax,value16		
	sub	bx,value16		
	sub	cx,value16		
	sub	dx,value16	

	Maybe multiplication and division instructions? 
	Possible float?

Comparisons:

	32 cmp instructions

	cmp	ax,bx		
	cmp	ax,cx		
	cmp	ax,dx	
	cmp	ax,value16
	cmp	ax,[bx]
	cmp	ax,[cx]
	cmp	ax,[dx]
	cmp	ax,[value16]

	cmp	bx,ax		
	cmp	bx,cx		
	cmp	bx,dx	
	cmp	bx,value16	
	cmp	bx,[ax]
	cmp	bx,[cx]
	cmp	bx,[dx]
	cmp	bx,[value16]

	cmp	cx,ax		
	cmp	cx,bx		
	cmp	cx,dx
	cmp	cx,value16	
	cmp	cx,[ax]
	cmp	cx,[bx]
	cmp	cx,[dx]
	cmp	cx,[value16]

	cmp	dx,ax		
	cmp	dx,bx		
	cmp	dx,cx
	cmp	dx,value16	
	cmp	dx,[ax]
	cmp	dx,[bx]
	cmp	dx,[cx]
	cmp	dx,[value16]
	
Jumps:

	8 jump instructions

	jmp	address16	
	jmp	[ax]	
	jmp	[bx]
	jmp	[cx]
	jmp	[dx]
	
	je	address16	
	jl	address16	
	jg	address16	

Bit wise Instructions:

	14 bitwise instructions
	
	and	ax,ax		
	and	ax,bx		
	and	ax,cx		
	and	ax,dx		

	or	ax,bx		
	or	ax,cx		
	or	ax,dx		

	not	ax			
	not	bx			
	not	cx			
	not	dx			

	xor	ax,bx		
	xor	ax,cx		
	xor	ax,dx		
	
Shifting Instructions:

	32 shifting instructions

	shl	ax,value16	
	shl	ax,bx		
	shl	ax,cx		
	shl	ax,dx		

	shl	bx,value16	
	shl	bx,ax		
	shl	bx,cx		
	shl	bx,dx		
	
	shl	cx,value16	
	shl	cx,ax		
	shl	cx,bx		
	shl	cx,dx		

	shl	dx,value16	
	shl	dx,ax		
	shl	dx,bx		
	shl	dx,cx		

	shr	ax,value16	
	shr	ax,bx		
	shr	ax,cx		
	shr	ax,dx		

	shr	bx,value16	
	shr	bx,ax		
	shr	bx,cx		
	shr	bx,dx		

	shr	cx,value16	
	shr	cx,ax		
	shr	cx,bx		
	shr	cx,dx		

	shr	dx,value16	
	shr	dx,ax		
	shr	dx,bx		
	shr	dx,cx		

Misc Instructions:
	
	12 misc instructions
	
	sets register to zero
	z	ax			
	z	bx			
	z	cx			
	z	dx			

	increments
	inc	ax			
	inc	bx			
	inc	cx			
	inc	dx			

	decrements
	dec	ax			
	dec	bx			
	dec	cx			
	dec	dx	

Graphics instructions:




	
	
	
	
